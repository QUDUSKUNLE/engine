basePath: /v1
definitions:
  db.Doctor:
    enum:
    - Female
    - Male
    type: string
    x-enum-varnames:
    - DoctorFemale
    - DoctorMale
  db.DocumentType:
    enum:
    - LAB_REPORT
    - PRESCRIPTION
    - DISCHARGE_SUMMARY
    - IMAGING
    - VACCINATION
    - ALLERGY
    - SURGERY
    - CHRONIC_CONDITION
    - FAMILY_HISTORY
    type: string
    x-enum-varnames:
    - DocumentTypeLABREPORT
    - DocumentTypePRESCRIPTION
    - DocumentTypeDISCHARGESUMMARY
    - DocumentTypeIMAGING
    - DocumentTypeVACCINATION
    - DocumentTypeALLERGY
    - DocumentTypeSURGERY
    - DocumentTypeCHRONICCONDITION
    - DocumentTypeFAMILYHISTORY
  db.ScheduleAcceptanceStatus:
    enum:
    - PENDING
    - ACCEPTED
    - REJECTED
    type: string
    x-enum-varnames:
    - ScheduleAcceptanceStatusPENDING
    - ScheduleAcceptanceStatusACCEPTED
    - ScheduleAcceptanceStatusREJECTED
  db.ScheduleStatus:
    enum:
    - SCHEDULED
    - COMPLETED
    - CANCELED
    type: string
    x-enum-varnames:
    - ScheduleStatusSCHEDULED
    - ScheduleStatusCOMPLETED
    - ScheduleStatusCANCELED
  db.UserEnum:
    enum:
    - USER
    - DIAGNOSTIC_CENTRE
    - HOSPITAL
    - ADMIN
    - DIAGNOSTIC_MANAGER
    - DIAGNOSTIC_CENTRE_OWNER
    - DIAGNOSTIC_CENTRE_MANAGER
    type: string
    x-enum-varnames:
    - UserEnumUSER
    - UserEnumDIAGNOSTICCENTRE
    - UserEnumHOSPITAL
    - UserEnumADMIN
    - UserEnumDIAGNOSTICMANAGER
    - UserEnumDIAGNOSTICCENTREOWNER
    - UserEnumDIAGNOSTICCENTREMANAGER
  domain.Address:
    properties:
      city:
        maxLength: 50
        type: string
      country:
        maxLength: 50
        type: string
      state:
        maxLength: 50
        type: string
      street:
        maxLength: 250
        type: string
    required:
    - city
    - country
    - state
    - street
    type: object
  domain.AppointmentStatus:
    enum:
    - pending
    - confirmed
    - in_progress
    - completed
    - cancelled
    - rescheduled
    type: string
    x-enum-varnames:
    - AppointmentStatusPending
    - AppointmentStatusConfirmed
    - AppointmentStatusInProgress
    - AppointmentStatusCompleted
    - AppointmentStatusCancelled
    - AppointmentStatusRescheduled
  domain.AvailabilitySlot:
    properties:
      break_time:
        description: minutes
        type: string
      created_at:
        type: string
      day_of_week:
        type: string
      diagnostic_centre_id:
        type: string
      end_time:
        type: string
      id:
        type: string
      max_appointments:
        type: integer
      slot_duration:
        description: minutes
        type: string
      start_time:
        type: string
      updated_at:
        type: string
    type: object
  domain.CancelAppointmentDTO:
    properties:
      appointmentID:
        type: string
      reason:
        maxLength: 500
        type: string
    required:
    - appointmentID
    - reason
    type: object
  domain.ChangePasswordDTO:
    properties:
      confirm_password:
        type: string
      current_password:
        type: string
      new_password:
        maxLength: 20
        minLength: 6
        type: string
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  domain.Contact:
    properties:
      email:
        type: string
      phone:
        items:
          type: string
        type: array
    required:
    - email
    - phone
    type: object
  domain.CreateAppointmentDTO:
    properties:
      amount:
        description: TimeSlot           TimeSlot  `json:"time_slot" validate:"required"`
        type: number
      appointment_date:
        type: string
      diagnostic_centre_id:
        type: string
      notes:
        maxLength: 500
        type: string
      payment_provider:
        enum:
        - PAYSTACK
        - FLUTTERWAVE
        - STRIPE
        - MONNIFY
        type: string
      preferred_doctor:
        enum:
        - Male
        - Female
        type: string
      test_type:
        enum:
        - BLOOD_TEST
        - URINE_TEST
        - X_RAY
        - MRI
        - CT_SCAN
        - ULTRASOUND
        - ECG
        - EEG
        - BIOPSY
        - SKIN_TEST
        - IMMUNOLOGY_TEST
        - HORMONE_TEST
        - VIRAL_TEST
        - BACTERIAL_TEST
        - PARASITIC_TEST
        - FUNGAL_TEST
        - MOLECULAR_TEST
        - TOXICOLOGY_TEST
        - ECHO
        - COVID_19_TEST
        - BLOOD_SUGAR_TEST
        - LIPID_PROFILE
        - HEMOGLOBIN_TEST
        - THYROID_TEST
        - LIVER_FUNCTION_TEST
        - KIDNEY_FUNCTION_TEST
        - URIC_ACID_TEST
        - VITAMIN_D_TEST
        - VITAMIN_B12_TEST
        - HEMOGRAM
        - COMPLETE_BLOOD_COUNT
        - BLOOD_GROUPING
        - HEPATITIS_B_TEST
        - HEPATITIS_C_TEST
        - HIV_TEST
        - MALARIA_TEST
        - DENGUE_TEST
        - TYPHOID_TEST
        - COVID_19_ANTIBODY_TEST
        - COVID_19_RAPID_ANTIGEN_TEST
        - COVID_19_RT_PCR_TEST
        - PREGNANCY_TEST
        - ALLERGY_TEST
        - GENETIC_TEST
        - OTHER
        type: string
    required:
    - amount
    - appointment_date
    - diagnostic_centre_id
    - test_type
    type: object
  domain.CreateAvailabilityDTO:
    properties:
      diagnostic_centre_id:
        type: string
      slots:
        items:
          $ref: '#/definitions/domain.Slots'
        minItems: 1
        type: array
    required:
    - diagnostic_centre_id
    - slots
    type: object
  domain.CreateDiagnosticDTO:
    properties:
      address:
        $ref: '#/definitions/domain.Address'
      admin_id:
        type: string
      available_tests:
        items:
          type: string
        type: array
      contact:
        $ref: '#/definitions/domain.Contact'
      created_by:
        type: string
      diagnostic_centre_name:
        maxLength: 250
        minLength: 10
        type: string
      doctors:
        items:
          $ref: '#/definitions/db.Doctor'
        type: array
      latitude:
        maximum: 90
        minimum: -90
        type: number
      longitude:
        maximum: 180
        minimum: -180
        type: number
    required:
    - address
    - admin_id
    - available_tests
    - contact
    - diagnostic_centre_name
    - doctors
    - latitude
    - longitude
    type: object
  domain.CreateScheduleDTO:
    properties:
      acceptance_status:
        allOf:
        - $ref: '#/definitions/db.ScheduleAcceptanceStatus'
        enum:
        - PENDING
        - ACCEPTED
        - REJECTED
      diagnostic_centre_id:
        type: string
      doctor:
        allOf:
        - $ref: '#/definitions/db.Doctor'
        enum:
        - Male
        - Female
      notes:
        type: string
      schedule_time:
        type: string
      test_type:
        enum:
        - BLOOD_TEST
        - URINE_TEST
        - X_RAY
        - MRI
        - CT_SCAN
        - ULTRASOUND
        - ECG
        - COVID_TEST
        - DNA_TEST
        - ALLERGY_TEST
        - GENETIC_TEST
        - OTHER
        - EEG
        - BIOPSY
        - SKIN_TEST
        - IMMUNOLOGY_TEST
        - HORMONE_TEST
        - VIRAL_TEST
        - BACTERIAL_TEST
        - PARASITIC_TEST
        - FUNGAL_TEST
        - MOLECULAR_TEST
        - TOXICOLOGY_TEST
        - ECHO
        - COVID_19_TEST
        - BLOOD_SUGAR_TEST
        - LIPID_PROFILE
        - HEMOGLOBIN_TEST
        - THYROID_TEST
        - LIVER_FUNCTION_TEST
        - KIDNEY_FUNCTION_TEST
        - URIC_ACID_TEST
        - VITAMIN_D_TEST
        - VITAMIN_B12_TEST
        - HEMOGRAM
        - COMPLETE_BLOOD_COUNT
        - BLOOD_GROUPING
        - HEPATITIS_B_TEST
        - HEPATITIS_C_TEST
        - HIV_TEST
        - MALARIA_TEST
        - DENGUE_TEST
        - TYPHOID_TEST
        - COVID_19_ANTIBODY_TEST
        - COVID_19_RAPID_ANTIGEN_TEST
        - COVID_19_RT_PCR_TEST
        - PREGNANCY_TEST
        type: string
      user_id:
        type: string
    required:
    - doctor
    - schedule_time
    - test_type
    type: object
  domain.DeactivateAccountDTO:
    properties:
      password:
        type: string
      reason:
        type: string
    required:
    - password
    type: object
  domain.DiagnosticCentreManagerRegisterDTO:
    properties:
      email:
        type: string
      user_type:
        $ref: '#/definitions/db.UserEnum'
    required:
    - email
    - user_type
    type: object
  domain.EmailVerificationDTO:
    properties:
      email:
        type: string
      token:
        type: string
    required:
    - email
    - token
    type: object
  domain.File:
    properties:
      content:
        items:
          type: integer
        type: array
      fileName:
        type: string
      fileSize:
        type: integer
    type: object
  domain.RequestPasswordResetDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  domain.RescheduleAppointmentDTO:
    properties:
      appointmentID:
        type: string
      new_date:
        type: string
      new_schedule_id:
        type: string
      new_time_slot:
        type: string
      reschedule_reason:
        maxLength: 500
        type: string
    required:
    - appointmentID
    - new_date
    - new_schedule_id
    - new_time_slot
    - reschedule_reason
    type: object
  domain.ResendVerificationDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  domain.ResetPasswordDTO:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      new_password:
        maxLength: 20
        minLength: 6
        type: string
      token:
        type: string
    required:
    - confirm_password
    - email
    - new_password
    - token
    type: object
  domain.Slots:
    properties:
      break_time:
        description: minutes
        minimum: 0
        type: integer
      day_of_week:
        enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
        type: string
      end_time:
        type: string
      max_appointments:
        minimum: 0
        type: integer
      slot_duration:
        description: minutes
        minimum: 1
        type: integer
      start_time:
        type: string
    required:
    - break_time
    - day_of_week
    - end_time
    - max_appointments
    - slot_duration
    - start_time
    type: object
  domain.UpdateAppointmentDTO:
    properties:
      appointmentID:
        type: string
      notes:
        maxLength: 500
        type: string
      status:
        allOf:
        - $ref: '#/definitions/domain.AppointmentStatus'
        enum:
        - pending
        - confirmed
        - in_progress
        - completed
        - cancelled
        - rescheduled
    required:
    - appointmentID
    - status
    type: object
  domain.UpdateAvailabilityDTO:
    properties:
      break_time:
        description: minutes
        minimum: 0
        type: integer
      end_time:
        type: string
      max_appointments:
        minimum: 0
        type: integer
      slot_duration:
        description: minutes
        minimum: 1
        type: integer
      start_time:
        type: string
    type: object
  domain.UpdateDiagnosticBodyDTO:
    properties:
      address:
        $ref: '#/definitions/domain.Address'
      admin_id:
        type: string
      available_tests:
        items:
          type: string
        type: array
      contact:
        $ref: '#/definitions/domain.Contact'
      created_by:
        type: string
      diagnostic_centre_name:
        type: string
      doctors:
        items:
          type: string
        type: array
      latitude:
        type: number
      longitude:
        type: number
    required:
    - admin_id
    type: object
  domain.UpdateDiagnosticManagerDTO:
    properties:
      manager_id:
        type: string
    required:
    - manager_id
    type: object
  domain.UpdateDiagnosticScheduleByCentreDTO:
    properties:
      acceptance_status:
        allOf:
        - $ref: '#/definitions/db.ScheduleAcceptanceStatus'
        enum:
        - PENDING
        - ACCEPTED
        - REJECTED
    required:
    - acceptance_status
    type: object
  domain.UpdateManyAvailabilityDTO:
    properties:
      slots:
        items:
          $ref: '#/definitions/domain.UpdateManyAvailabilitySlot'
        minItems: 1
        type: array
    required:
    - slots
    type: object
  domain.UpdateManyAvailabilitySlot:
    properties:
      break_time:
        description: minutes
        minimum: 0
        type: integer
      day_of_week:
        type: string
      diagnostic_centre_id:
        type: string
      end_time:
        type: string
      max_appointments:
        minimum: 1
        type: integer
      slot_duration:
        description: minutes
        minimum: 1
        type: integer
      start_time:
        type: string
    required:
    - day_of_week
    - diagnostic_centre_id
    type: object
  domain.UpdateMedicalRecordDTO:
    properties:
      diagnostic_centre_id:
        type: string
      document_date:
        type: string
      document_type:
        allOf:
        - $ref: '#/definitions/db.DocumentType'
        enum:
        - LAB_REPORT
        - PRESCRIPTION
        - DISCHARGE_SUMMARY
        - IMAGING
        - VACCINATION
        - ALLERGY
        - SURGERY
        - CHRONIC_CONDITION
        - FAMILY_HISTORY
      file_path:
        type: string
      file_type:
        type: string
      fileUpload:
        allOf:
        - $ref: '#/definitions/domain.File'
        description: Define File type below or import from the correct package
      is_shared:
        type: boolean
      provider_name:
        type: string
      record_id:
        type: string
      shared_until:
        type: string
      specialty:
        type: string
      title:
        minLength: 12
        type: string
      uploaded_at:
        type: string
      uploader_admin_id:
        type: string
    required:
    - diagnostic_centre_id
    - record_id
    - title
    type: object
  domain.UpdateScheduleDTO:
    properties:
      diagnostic_centre_id:
        type: string
      doctor:
        allOf:
        - $ref: '#/definitions/db.Doctor'
        enum:
        - Male
        - Female
      notes:
        type: string
      schedule_status:
        allOf:
        - $ref: '#/definitions/db.ScheduleStatus'
        enum:
        - SCHEDULED
        - CANCELED
      schedule_time:
        type: string
      test_type:
        enum:
        - BLOOD_TEST
        - URINE_TEST
        - X_RAY
        - MRI
        - CT_SCAN
        - ULTRASOUND
        - ECG
        - COVID_TEST
        - DNA_TEST
        - ALLERGY_TEST
        - GENETIC_TEST
        - OTHER
        - EEG
        - BIOPSY
        - SKIN_TEST
        - IMMUNOLOGY_TEST
        - HORMONE_TEST
        - VIRAL_TEST
        - BACTERIAL_TEST
        - PARASITIC_TEST
        - FUNGAL_TEST
        - MOLECULAR_TEST
        - TOXICOLOGY_TEST
        - ECHO
        - COVID_19_TEST
        - BLOOD_SUGAR_TEST
        - LIPID_PROFILE
        - HEMOGLOBIN_TEST
        - THYROID_TEST
        - LIVER_FUNCTION_TEST
        - KIDNEY_FUNCTION_TEST
        - URIC_ACID_TEST
        - VITAMIN_D_TEST
        - VITAMIN_B12_TEST
        - HEMOGRAM
        - COMPLETE_BLOOD_COUNT
        - BLOOD_GROUPING
        - HEPATITIS_B_TEST
        - HEPATITIS_C_TEST
        - HIV_TEST
        - MALARIA_TEST
        - DENGUE_TEST
        - TYPHOID_TEST
        - COVID_19_ANTIBODY_TEST
        - COVID_19_RAPID_ANTIGEN_TEST
        - COVID_19_RT_PCR_TEST
        - PREGNANCY_TEST
        type: string
      user_id:
        type: string
    type: object
  domain.UpdateUserProfileDTO:
    properties:
      first_name:
        minLength: 3
        type: string
      last_name:
        minLength: 3
        type: string
      nin:
        minLength: 11
        type: string
      phone_number:
        type: string
    required:
    - first_name
    - last_name
    type: object
  domain.UserRegisterDTO:
    properties:
      confirm_password:
        maxLength: 20
        minLength: 6
        type: string
      diagnostic_Centre:
        type: string
      email:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
      phone_number:
        type: string
      user_type:
        allOf:
        - $ref: '#/definitions/db.UserEnum'
        enum:
        - USER
        - DIAGNOSTIC_CENTRE_OWNER
    required:
    - confirm_password
    - email
    - password
    - user_type
    type: object
  domain.UserSignInDTO:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handlers.AppointmentSwagger:
    description: Appointment response for Swagger
    properties:
      appointment_date:
        description: 'format: date-time'
        example: "2025-06-26T21:00:00Z"
        type: string
      created_at:
        description: 'format: date-time'
        example: "2025-06-26T20:00:00Z"
        type: string
      diagnostic_centre_id:
        example: dc-001
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      patient_id:
        example: user-001
        type: string
      status:
        example: pending
        type: string
      updated_at:
        description: 'format: date-time'
        example: "2025-06-26T20:30:00Z"
        type: string
    type: object
  handlers.DiagnosticCentreSwagger:
    description: Diagnostic centre response for Swagger
    properties:
      address:
        example: 123 Main St, Lagos
        type: string
      created_at:
        description: 'format: date-time'
        example: "2025-06-26T20:00:00Z"
        type: string
      email:
        example: info@medicue.com
        type: string
      id:
        example: dc-001
        type: string
      latitude:
        example: 6.5244
        type: number
      longitude:
        example: 3.3792
        type: number
      name:
        example: Medicue Diagnostics
        type: string
      phone:
        example: "+2348000000000"
        type: string
      updated_at:
        description: 'format: date-time'
        example: "2025-06-26T20:30:00Z"
        type: string
    type: object
  handlers.ErrorResponse:
    description: Error response for Swagger
    properties:
      code:
        example: BAD_REQUEST
        type: string
      details:
        type: string
      message:
        example: Invalid request
        type: string
    type: object
  handlers.HealthResponse:
    properties:
      service:
        type: string
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  handlers.MedicalRecordSwagger:
    description: Medical record response for Swagger
    properties:
      created_at:
        description: 'format: date-time'
        example: "2025-06-26T20:00:00Z"
        type: string
      diagnostic_centre_id:
        example: dc-001
        type: string
      file_type:
        example: PDF
        type: string
      file_url:
        example: https://medicue.com/records/rec-001.pdf
        type: string
      id:
        example: rec-001
        type: string
      patient_id:
        example: user-001
        type: string
      updated_at:
        description: 'format: date-time'
        example: "2025-06-26T20:30:00Z"
        type: string
    type: object
  handlers.ScheduleSwagger:
    description: Diagnostic schedule response for Swagger
    properties:
      created_at:
        description: 'format: date-time'
        example: "2025-06-25T20:00:00Z"
        type: string
      diagnostic_centre_id:
        example: dc-001
        type: string
      id:
        example: sched-001
        type: string
      schedule_time:
        description: 'format: date-time'
        example: "2025-06-26T09:00:00Z"
        type: string
      status:
        example: pending
        type: string
      test_type:
        example: Blood Test
        type: string
      updated_at:
        description: 'format: date-time'
        example: "2025-06-25T21:00:00Z"
        type: string
      user_id:
        example: user-001
        type: string
    type: object
  handlers.UserSwagger:
    description: User response for Swagger
    properties:
      created_at:
        description: 'format: date-time'
        example: "2025-06-27T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      full_name:
        example: John Doe
        type: string
      id:
        example: user-001
        type: string
      role:
        example: PATIENT
        type: string
      updated_at:
        description: 'format: date-time'
        example: "2025-06-27T12:00:00Z"
        type: string
    type: object
host: localhost:7556
info:
  contact: {}
  description: Medicue API
  title: Medicue
  version: "1.0"
paths:
  /api/v1/availability:
    post:
      consumes:
      - application/json
      description: Create a new availability slot for the diagnostic centre
      parameters:
      - description: Availability information
        in: body
        name: availability
        required: true
        schema:
          $ref: '#/definitions/domain.CreateAvailabilityDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.AvailabilitySlot'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create availability for a diagnostic centre
      tags:
      - Availability
  /api/v1/availability/{diagnostic_centre_id}:
    get:
      consumes:
      - application/json
      description: Get availability slots for the diagnostic centre, optionally filtered
        by day of week
      parameters:
      - description: Diagnostic Centre ID
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Day of week (monday, tuesday, etc.)
        in: query
        name: day_of_week
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.AvailabilitySlot'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get availability for a diagnostic centre
      tags:
      - Availability
    put:
      consumes:
      - application/json
      description: Update multiple availability slots for the diagnostic centre
      parameters:
      - description: Diagnostic Centre ID
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Updated availability information
        in: body
        name: availability
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateManyAvailabilityDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.AvailabilitySlot'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Bulk update availability for a diagnostic centre
      tags:
      - Availability
  /api/v1/availability/{diagnostic_centre_id}/{day_of_week}:
    delete:
      consumes:
      - application/json
      description: Delete an availability slot for the diagnostic centre
      parameters:
      - description: Diagnostic Centre ID
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Day of week (monday, tuesday, etc.)
        in: path
        name: day_of_week
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete availability for a diagnostic centre
      tags:
      - Availability
    put:
      consumes:
      - application/json
      description: Update an existing availability slot for the diagnostic centre
      parameters:
      - description: Diagnostic Centre ID
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Day of week (monday, tuesday, etc.)
        in: path
        name: day_of_week
        required: true
        type: string
      - description: Updated availability information
        in: body
        name: availability
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateAvailabilityDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AvailabilitySlot'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update availability for a diagnostic centre
      tags:
      - Availability
  /diagnostic_centres:
    get:
      description: Search for diagnostic centres based on location, available doctors,
        and test types
      parameters:
      - description: Latitude (-90 to 90)
        in: query
        maximum: 90
        minimum: -90
        name: latitude
        required: true
        type: number
      - description: Longitude (-180 to 180)
        in: query
        maximum: 180
        minimum: -180
        name: longitude
        required: true
        type: number
      - description: Filter by doctor specialization
        in: query
        name: doctor
        type: string
      - description: Filter by available test type
        in: query
        name: available_tests
        type: string
      - default: 1
        description: Page number for pagination
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of results per page
        in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of diagnostic centres
          schema:
            items:
              $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Search for diagnostic centres
      tags:
      - DiagnosticCentre
    post:
      consumes:
      - application/json
      description: Create a new diagnostic centre with location, contact details,
        and available services
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic centre details
        in: body
        name: diagnostic_centre
        required: true
        schema:
          $ref: '#/definitions/domain.CreateDiagnosticDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Diagnostic centre created successfully
          schema:
            $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required/invalid token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: User is not a diagnostic centre owner
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new diagnostic centre
      tags:
      - DiagnosticCentre
  /diagnostic_centres/{diagnostic_centre_id}:
    delete:
      description: Delete an existing diagnostic centre (owner only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Diagnostic centre deleted successfully
          schema:
            $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: User is not the owner
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Diagnostic centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a diagnostic centre
      tags:
      - DiagnosticCentre
    get:
      description: Retrieve detailed information about a specific diagnostic centre
      parameters:
      - description: Diagnostic Centre ID (UUID format)
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Diagnostic centre details retrieved successfully
          schema:
            $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
        "400":
          description: Invalid diagnostic centre ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Diagnostic centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a diagnostic centre by ID
      tags:
      - DiagnosticCentre
    put:
      consumes:
      - application/json
      description: Update an existing diagnostic centre's information (owner only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID (UUID format)
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Updated diagnostic centre details
        in: body
        name: diagnostic_centre
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateDiagnosticBodyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Diagnostic centre updated successfully
          schema:
            $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required/invalid token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: User is not the owner of this diagnostic centre
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Diagnostic centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a diagnostic centre
      tags:
      - DiagnosticCentre
  /diagnostic_centres/{diagnostic_centre_id}/diagnostic_schedules:
    get:
      description: Get all schedules for a specific diagnostic centre with pagination
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - default: 10
        description: Number of records to return
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Number of records to skip
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of schedules
          schema:
            items:
              $ref: '#/definitions/handlers.ScheduleSwagger'
            type: array
        "400":
          description: Invalid diagnostic centre ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Diagnostic centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List schedules for a diagnostic centre
      tags:
      - Schedule
  /diagnostic_centres/{diagnostic_centre_id}/diagnostic_schedules/{schedule_id}:
    get:
      description: Retrieve a specific schedule for a diagnostic centre. Accessible
        by diagnostic centre staff.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Schedule ID
        format: uuid
        in: path
        name: schedule_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Schedule details
          schema:
            $ref: '#/definitions/handlers.ScheduleSwagger'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a schedule by diagnostic centre
      tags:
      - Schedule
    put:
      consumes:
      - application/json
      description: Update a schedule's acceptance status. Only accessible by diagnostic
        centre staff.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Schedule ID
        format: uuid
        in: path
        name: schedule_id
        required: true
        type: string
      - description: Updated schedule status
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateDiagnosticScheduleByCentreDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Schedule updated successfully
          schema:
            $ref: '#/definitions/handlers.ScheduleSwagger'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update schedule status by centre
      tags:
      - Schedule
  /diagnostic_centres/{diagnostic_centre_id}/manager:
    put:
      consumes:
      - application/json
      description: Update or assign a new manager to a diagnostic centre (owner only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Manager details
        in: body
        name: manager_details
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateDiagnosticManagerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Manager updated successfully
          schema:
            $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update diagnostic centre manager
      tags:
      - DiagnosticCentre
  /diagnostic_centres/{diagnostic_centre_id}/records:
    get:
      description: Get all medical records uploaded by a diagnostic centre
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Filter by start date (YYYY-MM-DD)
        format: date
        in: query
        name: start_date
        type: string
      - description: Filter by end date (YYYY-MM-DD)
        format: date
        in: query
        name: end_date
        type: string
      - description: Filter by document type
        enum:
        - LAB_REPORT
        - PRESCRIPTION
        - IMAGING
        - DISCHARGE_SUMMARY
        - OTHER
        in: query
        name: document_type
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of medical records
          schema:
            items:
              $ref: '#/definitions/handlers.MedicalRecordSwagger'
            type: array
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get diagnostic centre medical records
      tags:
      - DiagnosticCentre
  /diagnostic_centres/{diagnostic_centre_id}/schedules:
    get:
      description: Get all schedules for a diagnostic centre with pagination and filtering
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - description: Filter by start date (YYYY-MM-DD)
        format: date
        in: query
        name: start_date
        type: string
      - description: Filter by end date (YYYY-MM-DD)
        format: date
        in: query
        name: end_date
        type: string
      - description: Filter by status
        enum:
        - PENDING
        - ACCEPTED
        - REJECTED
        in: query
        name: status
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of schedules
          schema:
            items:
              $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
            type: array
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get diagnostic centre schedules
      tags:
      - DiagnosticCentre
  /diagnostic_centres/{diagnostic_centre_id}/stats:
    get:
      description: Get statistical information about a diagnostic centre (appointments,
        tests, etc.)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Centre statistics
          schema:
            $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Diagnostic centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get diagnostic centre statistics
      tags:
      - DiagnosticCentre
  /diagnostic_centres/manager:
    get:
      description: Get all diagnostic centres managed by the authenticated diagnostic
        centre manager
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of diagnostic centres
          schema:
            items:
              $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
            type: array
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: User is not a manager
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List manager's diagnostic centres
      tags:
      - DiagnosticCentre
  /diagnostic_centres/owner:
    get:
      description: Get all diagnostic centres owned by the authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of diagnostic centres
          schema:
            items:
              $ref: '#/definitions/handlers.DiagnosticCentreSwagger'
            type: array
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List owner's diagnostic centres
      tags:
      - DiagnosticCentre
  /diagnostic_schedules:
    get:
      description: Get all diagnostic schedules for the authenticated user with pagination
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 10
        description: Number of records to return
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Number of records to skip
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of schedules
          schema:
            items:
              $ref: '#/definitions/handlers.ScheduleSwagger'
            type: array
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user's diagnostic schedules
      tags:
      - Schedule
    post:
      consumes:
      - application/json
      description: Schedule a diagnostic test at a diagnostic centre. Requires user
        authentication.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Schedule details
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/domain.CreateScheduleDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Schedule created successfully
          schema:
            $ref: '#/definitions/handlers.ScheduleSwagger'
        "400":
          description: Invalid schedule data/Invalid datetime format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new diagnostic schedule
      tags:
      - Schedule
  /diagnostic_schedules/{schedule_id}:
    delete:
      description: Delete an existing diagnostic schedule. Only accessible by the
        schedule owner.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Schedule ID (UUID format)
        format: uuid
        in: path
        name: schedule_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Schedule deleted successfully
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not the schedule owner
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a diagnostic schedule
      tags:
      - Schedule
    get:
      description: Retrieve details of a specific diagnostic schedule by ID. Only
        accessible by the schedule owner.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Schedule ID (UUID format)
        format: uuid
        in: path
        name: schedule_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Schedule details retrieved successfully
          schema:
            $ref: '#/definitions/handlers.ScheduleSwagger'
        "400":
          description: Invalid schedule ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not the schedule owner
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a specific diagnostic schedule
      tags:
      - Schedule
    put:
      consumes:
      - application/json
      description: Update an existing diagnostic schedule. Only accessible by the
        schedule owner.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Schedule ID (UUID format)
        format: uuid
        in: path
        name: schedule_id
        required: true
        type: string
      - description: Updated schedule details
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateScheduleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Schedule updated successfully
          schema:
            $ref: '#/definitions/handlers.ScheduleSwagger'
        "204":
          description: Schedule updated successfully with no content to return
        "400":
          description: Invalid schedule data/Invalid datetime format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not the schedule owner
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a diagnostic schedule
      tags:
      - Schedule
  /medical_records:
    get:
      description: Get all medical records for the authenticated user with pagination
        and filtering
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Records per page
        in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      - description: Filter by document type
        enum:
        - LAB_REPORT
        - PRESCRIPTION
        - IMAGING
        - DISCHARGE_SUMMARY
        - OTHER
        in: query
        name: document_type
        type: string
      - description: Filter by date from (YYYY-MM-DD)
        format: date
        in: query
        name: from_date
        type: string
      - description: Filter by date to (YYYY-MM-DD)
        format: date
        in: query
        name: to_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of medical records
          schema:
            items:
              $ref: '#/definitions/handlers.MedicalRecordSwagger'
            type: array
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user's medical records
      tags:
      - MedicalRecord
    post:
      consumes:
      - multipart/form-data
      description: Upload a new medical record with metadata and file attachment
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        format: uuid
        in: formData
        name: user_id
        required: true
        type: string
      - description: Uploader ID (for diagnostic centres)
        format: uuid
        in: formData
        name: uploader_id
        type: string
      - description: Associated Schedule ID
        format: uuid
        in: formData
        name: schedule_id
        type: string
      - description: Record title
        in: formData
        name: title
        required: true
        type: string
      - description: Type of medical document
        enum:
        - LAB_REPORT
        - PRESCRIPTION
        - IMAGING
        - DISCHARGE_SUMMARY
        - OTHER
        in: formData
        name: document_type
        required: true
        type: string
      - description: Date of the document
        format: date
        in: formData
        name: document_date
        required: true
        type: string
      - description: Healthcare provider name
        in: formData
        name: provider_name
        type: string
      - description: Medical specialty
        in: formData
        name: specialty
        type: string
      - description: Medical record file (PDF/Image)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Medical record created successfully
          schema:
            $ref: '#/definitions/handlers.MedicalRecordSwagger'
        "400":
          description: Invalid input data/file format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload a new medical record
      tags:
      - MedicalRecord
  /medical_records/{record_id}:
    get:
      description: Retrieve a specific medical record. Access limited to record owner
        or authorized diagnostic centre.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Medical Record ID
        format: uuid
        in: path
        name: record_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Medical record details
          schema:
            $ref: '#/definitions/handlers.MedicalRecordSwagger'
        "400":
          description: Invalid record ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a medical record by ID
      tags:
      - MedicalRecord
    put:
      consumes:
      - application/json
      description: Update metadata of an existing medical record. File content cannot
        be updated.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Medical Record ID
        format: uuid
        in: path
        name: record_id
        required: true
        type: string
      - description: Updated record details
        in: body
        name: record
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateMedicalRecordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Record updated successfully
          schema:
            $ref: '#/definitions/handlers.MedicalRecordSwagger'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized to update this record
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a medical record
      tags:
      - MedicalRecord
  /medical_records/{record_id}/diagnostic_centre/{diagnostic_centre_id}:
    get:
      description: Retrieve a medical record uploaded by a diagnostic centre
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Medical Record ID
        format: uuid
        in: path
        name: record_id
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Medical record details
          schema:
            $ref: '#/definitions/handlers.MedicalRecordSwagger'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized to access this record
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an uploaded medical record
      tags:
      - MedicalRecord
  /medical_records/diagnostic_centre/{diagnostic_centre_id}:
    get:
      description: Get all medical records uploaded by a diagnostic centre with pagination
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Diagnostic Centre ID
        format: uuid
        in: path
        name: diagnostic_centre_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Records per page
        in: query
        maximum: 100
        minimum: 1
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of medical records
          schema:
            items:
              $ref: '#/definitions/handlers.MedicalRecordSwagger'
            type: array
        "400":
          description: Invalid diagnostic centre ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized to access these records
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Diagnostic centre not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List uploaded medical records
      tags:
      - MedicalRecord
  /v1/account:
    delete:
      consumes:
      - application/json
      description: Deactivate user's account (soft delete)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Account deactivation details
        in: body
        name: deactivate
        required: true
        schema:
          $ref: '#/definitions/domain.DeactivateAccountDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Account deactivated successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required/Invalid password
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deactivate user account
      tags:
      - User
  /v1/account/password:
    put:
      consumes:
      - application/json
      description: Allow user to change their current password
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Password change details
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/domain.ChangePasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Password changed successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required/Invalid current password
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Password validation failed
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - User
  /v1/account/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the user's profile information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile details
          schema:
            $ref: '#/definitions/handlers.UserSwagger'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user's profile information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Profile update details
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateUserProfileDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Updated profile details
          schema:
            $ref: '#/definitions/handlers.UserSwagger'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User
  /v1/appointments:
    get:
      consumes:
      - application/json
      description: List appointments with optional filters
      parameters:
      - description: Filter by diagnostic centre ID
        in: query
        name: diagnostic_centre_id
        type: string
      - description: Filter by status (pending, confirmed, in_progress, completed,
          cancelled, rescheduled)
        in: query
        name: status
        type: string
      - description: Start date (RFC3339)
        in: query
        name: from_date
        type: string
      - description: End date (RFC3339)
        in: query
        name: to_date
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AppointmentSwagger'
            type: array
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List appointments
      tags:
      - Appointments
    post:
      consumes:
      - application/json
      description: Create a new appointment for a diagnostic test
      parameters:
      - description: Appointment details
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/domain.CreateAppointmentDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.AppointmentSwagger'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Diagnostic centre or schedule not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create appointment
      tags:
      - Appointments
  /v1/appointments/{appointment_id}:
    get:
      consumes:
      - application/json
      description: Get an appointment by its ID
      parameters:
      - description: Appointment ID
        in: path
        name: appointment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AppointmentSwagger'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized to view this appointment
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get appointment
      tags:
      - Appointments
    put:
      consumes:
      - application/json
      description: Update an existing appointment's details
      parameters:
      - description: Appointment ID
        in: path
        name: appointment_id
        required: true
        type: string
      - description: Updated appointment details
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateAppointmentDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AppointmentSwagger'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized to update this appointment
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update appointment
      tags:
      - Appointments
  /v1/appointments/{appointment_id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel an existing appointment
      parameters:
      - description: Appointment ID
        in: path
        name: appointment_id
        required: true
        type: string
      - description: Cancellation details
        in: body
        name: cancellation
        required: true
        schema:
          $ref: '#/definitions/domain.CancelAppointmentDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Cancellation success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data or appointment state
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized to cancel this appointment
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Cancel appointment
      tags:
      - Appointments
  /v1/appointments/{appointment_id}/confirm:
    post:
      consumes:
      - application/json
      description: Confirm an appointment by its ID
      parameters:
      - description: Appointment ID
        in: path
        name: appointment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Appointment confirmed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Confirm appointment
      tags:
      - Appointments
  /v1/appointments/{appointment_id}/reschedule:
    post:
      consumes:
      - application/json
      description: Reschedule an existing appointment to a new time
      parameters:
      - description: Appointment ID
        in: path
        name: appointment_id
        required: true
        type: string
      - description: Rescheduling details
        in: body
        name: reschedule
        required: true
        schema:
          $ref: '#/definitions/domain.RescheduleAppointmentDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AppointmentSwagger'
        "400":
          description: Invalid input data or appointment state
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not authorized to reschedule this appointment
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Reschedule appointment
      tags:
      - Appointments
  /v1/diagnostic_centre_manager:
    post:
      consumes:
      - application/json
      description: Create a new diagnostic centre manager account. Only accessible
        by diagnostic centre owners.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Manager details
        in: body
        name: manager
        required: true
        schema:
          $ref: '#/definitions/domain.DiagnosticCentreManagerRegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Manager account created successfully
          schema:
            $ref: '#/definitions/handlers.UserSwagger'
        "202":
          description: Manager invite sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data/Email already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Not a diagnostic centre owner
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Invalid manager type
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a diagnostic centre manager
      tags:
      - User
  /v1/health:
    get:
      consumes:
      - application/json
      description: Returns the health status of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Health check endpoint
      tags:
      - health
  /v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token for API access
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/domain.UserSignInDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'token: JWT token for authentication'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - User
  /v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user (patient) or diagnostic centre owner in the
        system
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/handlers.UserSwagger'
        "400":
          description: Invalid input data/Email already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Invalid user type/Validation failed
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - User
  /v1/request_password_reset:
    post:
      consumes:
      - application/json
      description: Send a password reset link to user's email
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.RequestPasswordResetDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Reset link sent if email exists'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Request password reset
      tags:
      - User
  /v1/resend_verification:
    post:
      consumes:
      - application/json
      description: Resend the email verification token to the user's email address
      parameters:
      - description: Email address
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/domain.ResendVerificationDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Verification email sent'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Resend verification email
      tags:
      - User
  /v1/reset_password:
    post:
      consumes:
      - application/json
      description: Reset user's password using the token received via email
      parameters:
      - description: Password reset details
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/domain.ResetPasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Password reset successful'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Expired token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "422":
          description: Password validation failed
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Reset password
      tags:
      - User
  /v1/verify_email:
    post:
      consumes:
      - application/json
      description: Verify a user's email address using the token sent to their email
      parameters:
      - description: Email verification details
        in: body
        name: verification
        required: true
        schema:
          $ref: '#/definitions/domain.EmailVerificationDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Email verified successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Verify user email
      tags:
      - User
swagger: "2.0"
