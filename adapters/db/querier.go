// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	CancelAppointment(ctx context.Context, arg CancelAppointmentParams) (*Appointment, error)
	CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (*Appointment, error)
	CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (*EmailVerificationToken, error)
	// Create a Medical Record
	CreateMedicalRecord(ctx context.Context, arg CreateMedicalRecordParams) (*MedicalRecord, error)
	CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) error
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	Create_Availability(ctx context.Context, arg Create_AvailabilityParams) ([]*DiagnosticCentreAvailability, error)
	// Inserts a new diagnostic record into the diagnostic_centres table.
	Create_Diagnostic_Centre(ctx context.Context, arg Create_Diagnostic_CentreParams) (*DiagnosticCentre, error)
	// Create a diagnostic schedule
	Create_Diagnostic_Schedule(ctx context.Context, arg Create_Diagnostic_ScheduleParams) (*DiagnosticSchedule, error)
	Create_Payment(ctx context.Context, arg Create_PaymentParams) (*Payment, error)
	Create_Single_Availability(ctx context.Context, arg Create_Single_AvailabilityParams) (*DiagnosticCentreAvailability, error)
	Create_Test_Price(ctx context.Context, arg Create_Test_PriceParams) ([]*DiagnosticCentreTestPrice, error)
	DeleteAppointment(ctx context.Context, id string) error
	Delete_Availability(ctx context.Context, arg Delete_AvailabilityParams) error
	// Deletes a diagnosticCentre only by the created_by.
	Delete_Diagnostic_Centre_ByOwner(ctx context.Context, arg Delete_Diagnostic_Centre_ByOwnerParams) (*DiagnosticCentre, error)
	Delete_Diagnostic_Schedule(ctx context.Context, arg Delete_Diagnostic_ScheduleParams) (*DiagnosticSchedule, error)
	Find_Nearest_Diagnostic_Centres_WhenRejected(ctx context.Context, arg Find_Nearest_Diagnostic_Centres_WhenRejectedParams) ([]*Find_Nearest_Diagnostic_Centres_WhenRejectedRow, error)
	GetAppointment(ctx context.Context, id string) (*Appointment, error)
	GetCentreAppointments(ctx context.Context, arg GetCentreAppointmentsParams) ([]*Appointment, error)
	GetEmailVerificationToken(ctx context.Context, token string) (*EmailVerificationToken, error)
	// Get a Medical Record
	GetMedicalRecord(ctx context.Context, arg GetMedicalRecordParams) (*GetMedicalRecordRow, error)
	// Get Medical Records
	// Retrieves a paginated list of medical records for a specific user, ordered by creation date (most recent first).
	GetMedicalRecords(ctx context.Context, arg GetMedicalRecordsParams) ([]*GetMedicalRecordsRow, error)
	GetPasswordResetToken(ctx context.Context, token string) (*PasswordResetToken, error)
	GetPatientAppointments(ctx context.Context, arg GetPatientAppointmentsParams) ([]*GetPatientAppointmentsRow, error)
	GetPaymentByReference(ctx context.Context, providerReference pgtype.Text) (*Payment, error)
	// This is just a helper query to make sqlc generate the Doctor type
	GetSampleDoctor(ctx context.Context) (Doctor, error)
	// This is just a helper query to make sqlc generate the Doctor type as array
	GetSampleDoctorArray(ctx context.Context) ([]Doctor, error)
	// Get an Uploader Medical Record
	// Retrieves a medical record by its ID and uploader ID.
	GetUploaderMedicalRecord(ctx context.Context, arg GetUploaderMedicalRecordParams) (*GetUploaderMedicalRecordRow, error)
	// Get Uploader Medical Records
	// Retrieves a paginated list of medical records uploaded by a specific uploader, explicitly ordered by creation date in descending order (most recent first).
	GetUploaderMedicalRecords(ctx context.Context, arg GetUploaderMedicalRecordsParams) ([]*GetUploaderMedicalRecordsRow, error)
	GetUser(ctx context.Context, id string) (*User, error)
	GetUserByEmail(ctx context.Context, email pgtype.Text) (*User, error)
	GetUsers(ctx context.Context, arg GetUsersParams) ([]*User, error)
	Get_Availability(ctx context.Context, arg Get_AvailabilityParams) ([]*DiagnosticCentreAvailability, error)
	Get_Diagnostic_Availability(ctx context.Context, diagnosticCentreID string) ([]*DiagnosticCentreAvailability, error)
	// Retrieves a single diagnostic record by its ID.
	Get_Diagnostic_Centre(ctx context.Context, id string) (*Get_Diagnostic_CentreRow, error)
	// GetDiagnosticCentreByManager
	Get_Diagnostic_Centre_ByManager(ctx context.Context, arg Get_Diagnostic_Centre_ByManagerParams) (*Get_Diagnostic_Centre_ByManagerRow, error)
	// GetADiagnosticCentreByOwner :one
	Get_Diagnostic_Centre_ByOwner(ctx context.Context, arg Get_Diagnostic_Centre_ByOwnerParams) (*Get_Diagnostic_Centre_ByOwnerRow, error)
	Get_Diagnostic_Centre_Managers(ctx context.Context, arg Get_Diagnostic_Centre_ManagersParams) ([]*Get_Diagnostic_Centre_ManagersRow, error)
	// Get Diagnostic Schedule
	Get_Diagnostic_Schedule(ctx context.Context, arg Get_Diagnostic_ScheduleParams) (*DiagnosticSchedule, error)
	// Get Diagnostic Schedules
	Get_Diagnostic_Schedules(ctx context.Context, arg Get_Diagnostic_SchedulesParams) ([]*DiagnosticSchedule, error)
	Get_Diagnsotic_Schedule_By_Centre(ctx context.Context, arg Get_Diagnsotic_Schedule_By_CentreParams) (*DiagnosticSchedule, error)
	Get_Diagnsotic_Schedules_By_Centre(ctx context.Context, arg Get_Diagnsotic_Schedules_By_CentreParams) ([]*DiagnosticSchedule, error)
	// Retrieves the nearest diagnostic centres based on latitude and longitude.
	Get_Nearest_Diagnostic_Centres(ctx context.Context, arg Get_Nearest_Diagnostic_CentresParams) ([]*Get_Nearest_Diagnostic_CentresRow, error)
	Get_Payment(ctx context.Context, id string) (*Payment, error)
	// Retrieves all diagnostic records for a specific owner.
	List_Diagnostic_Centres_ByOwner(ctx context.Context, arg List_Diagnostic_Centres_ByOwnerParams) ([]*List_Diagnostic_Centres_ByOwnerRow, error)
	List_Payments(ctx context.Context, arg List_PaymentsParams) ([]*Payment, error)
	MarkEmailAsVerified(ctx context.Context, email pgtype.Text) error
	MarkEmailVerificationTokenUsed(ctx context.Context, id string) error
	MarkResetTokenUsed(ctx context.Context, id string) error
	Refund_Payment(ctx context.Context, arg Refund_PaymentParams) (*Payment, error)
	RescheduleAppointment(ctx context.Context, arg RescheduleAppointmentParams) (*Appointment, error)
	// Retrieves all diagnostic records with pagination.
	Retrieve_Diagnostic_Centres(ctx context.Context, arg Retrieve_Diagnostic_CentresParams) ([]*Retrieve_Diagnostic_CentresRow, error)
	// Searches diagnostic_centres by name with pagination.
	Search_Diagnostic_Centres(ctx context.Context, arg Search_Diagnostic_CentresParams) ([]*Search_Diagnostic_CentresRow, error)
	// SearchDiagnosticWith Doctor type
	Search_Diagnostic_Centres_ByDoctor(ctx context.Context, arg Search_Diagnostic_Centres_ByDoctorParams) ([]*Search_Diagnostic_Centres_ByDoctorRow, error)
	UpdateAppointmentPayment(ctx context.Context, arg UpdateAppointmentPaymentParams) (*Appointment, error)
	UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) (*Appointment, error)
	// Uploader Update a Medical Record
	// Updates a medical record by uploader, allowing partial updates to fields. Only the uploader can update their own records. Updates the 'updated_at' timestamp.
	UpdateMedicalRecordByUploader(ctx context.Context, arg UpdateMedicalRecordByUploaderParams) (*MedicalRecord, error)
	UpdateReminderSent(ctx context.Context, id string) (*Appointment, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (*UpdateUserRow, error)
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error
	Update_Availability(ctx context.Context, arg Update_AvailabilityParams) (*DiagnosticCentreAvailability, error)
	// Updates a diagnostic centre by the owner.
	Update_Diagnostic_Centre_ByOwner(ctx context.Context, arg Update_Diagnostic_Centre_ByOwnerParams) (*DiagnosticCentre, error)
	// Update a diagnostic schedule
	Update_Diagnostic_Schedule(ctx context.Context, arg Update_Diagnostic_ScheduleParams) (*DiagnosticSchedule, error)
	Update_Diagnostic_Schedule_By_Centre(ctx context.Context, arg Update_Diagnostic_Schedule_By_CentreParams) (*DiagnosticSchedule, error)
	Update_Many_Availability(ctx context.Context, arg Update_Many_AvailabilityParams) ([]*DiagnosticCentreAvailability, error)
	Update_Payment_Status(ctx context.Context, arg Update_Payment_StatusParams) (*Payment, error)
}

var _ Querier = (*Queries)(nil)
