// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: test_price.sql

package db

import (
	"context"
)

const create_Test_Price = `-- name: Create_Test_Price :many
WITH test_price_params AS (
    SELECT 
        unnest($1::uuid[]) as diagnostic_centre_id,
        unnest($2::text[]) as test_type,
        unnest($3::float[]) as price,
        unnest($4::varchar[]) as currency,
        unnest($5::boolean[]) as is_active
)
INSERT INTO diagnostic_centre_test_prices (
    diagnostic_centre_id,
    test_type,
    price,
    currency,
    is_active
) 
SELECT diagnostic_centre_id, test_type, price, currency, is_active FROM test_price_params
RETURNING id, diagnostic_centre_id, test_type, price, currency, is_active, created_at, updated_at
`

type Create_Test_PriceParams struct {
	Column1 []string  `db:"column_1" json:"column_1"`
	Column2 []string  `db:"column_2" json:"column_2"`
	Column3 []float64 `db:"column_3" json:"column_3"`
	Column4 []string  `db:"column_4" json:"column_4"`
	Column5 []bool    `db:"column_5" json:"column_5"`
}

func (q *Queries) Create_Test_Price(ctx context.Context, arg Create_Test_PriceParams) ([]*DiagnosticCentreTestPrice, error) {
	rows, err := q.db.Query(ctx, create_Test_Price,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*DiagnosticCentreTestPrice
	for rows.Next() {
		var i DiagnosticCentreTestPrice
		if err := rows.Scan(
			&i.ID,
			&i.DiagnosticCentreID,
			&i.TestType,
			&i.Price,
			&i.Currency,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
