// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: password_reset.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordResetToken = `-- name: CreatePasswordResetToken :exec
INSERT INTO password_reset_tokens (
  id, email, token, expires_at
) VALUES (uuid_generate_v4(), $1, $2, $3)
`

type CreatePasswordResetTokenParams struct {
	Email     string             `db:"email" json:"email"`
	Token     string             `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) error {
	_, err := q.db.Exec(ctx, createPasswordResetToken, arg.Email, arg.Token, arg.ExpiresAt)
	return err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT id, email, token, expires_at, used, created_at FROM password_reset_tokens 
WHERE token = $1 AND used = false 
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (*PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, getPasswordResetToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return &i, err
}

const markResetTokenUsed = `-- name: MarkResetTokenUsed :exec
UPDATE password_reset_tokens
SET used = true
WHERE id = $1
`

func (q *Queries) MarkResetTokenUsed(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, markResetTokenUsed, id)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       string `db:"id" json:"id"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password = $2
WHERE email = $1
`

type UpdateUserPasswordParams struct {
	Email    pgtype.Text `db:"email" json:"email"`
	Password string      `db:"password" json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Email, arg.Password)
	return err
}
