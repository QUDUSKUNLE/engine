// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AppointmentStatus string

const (
	AppointmentStatusPending     AppointmentStatus = "pending"
	AppointmentStatusConfirmed   AppointmentStatus = "confirmed"
	AppointmentStatusInProgress  AppointmentStatus = "in_progress"
	AppointmentStatusCompleted   AppointmentStatus = "completed"
	AppointmentStatusCancelled   AppointmentStatus = "cancelled"
	AppointmentStatusRescheduled AppointmentStatus = "rescheduled"
)

func (e *AppointmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppointmentStatus(s)
	case string:
		*e = AppointmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AppointmentStatus: %T", src)
	}
	return nil
}

type NullAppointmentStatus struct {
	AppointmentStatus AppointmentStatus `json:"appointment_status"`
	Valid             bool              `json:"valid"` // Valid is true if AppointmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppointmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AppointmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppointmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppointmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppointmentStatus), nil
}

func (e AppointmentStatus) Valid() bool {
	switch e {
	case AppointmentStatusPending,
		AppointmentStatusConfirmed,
		AppointmentStatusInProgress,
		AppointmentStatusCompleted,
		AppointmentStatusCancelled,
		AppointmentStatusRescheduled:
		return true
	}
	return false
}

func AllAppointmentStatusValues() []AppointmentStatus {
	return []AppointmentStatus{
		AppointmentStatusPending,
		AppointmentStatusConfirmed,
		AppointmentStatusInProgress,
		AppointmentStatusCompleted,
		AppointmentStatusCancelled,
		AppointmentStatusRescheduled,
	}
}

type AvailableTests string

const (
	AvailableTestsBLOODTEST               AvailableTests = "BLOOD_TEST"
	AvailableTestsURINETEST               AvailableTests = "URINE_TEST"
	AvailableTestsXRAY                    AvailableTests = "X_RAY"
	AvailableTestsMRI                     AvailableTests = "MRI"
	AvailableTestsCTSCAN                  AvailableTests = "CT_SCAN"
	AvailableTestsULTRASOUND              AvailableTests = "ULTRASOUND"
	AvailableTestsECG                     AvailableTests = "ECG"
	AvailableTestsEEG                     AvailableTests = "EEG"
	AvailableTestsBIOPSY                  AvailableTests = "BIOPSY"
	AvailableTestsSKINTEST                AvailableTests = "SKIN_TEST"
	AvailableTestsALLERGYTEST             AvailableTests = "ALLERGY_TEST"
	AvailableTestsGENETICTEST             AvailableTests = "GENETIC_TEST"
	AvailableTestsIMMUNOLOGYTEST          AvailableTests = "IMMUNOLOGY_TEST"
	AvailableTestsHORMONETEST             AvailableTests = "HORMONE_TEST"
	AvailableTestsVIRALTEST               AvailableTests = "VIRAL_TEST"
	AvailableTestsBACTERIALTEST           AvailableTests = "BACTERIAL_TEST"
	AvailableTestsPARASITICTEST           AvailableTests = "PARASITIC_TEST"
	AvailableTestsFUNGALTEST              AvailableTests = "FUNGAL_TEST"
	AvailableTestsMOLECULARTEST           AvailableTests = "MOLECULAR_TEST"
	AvailableTestsTOXICOLOGYTEST          AvailableTests = "TOXICOLOGY_TEST"
	AvailableTestsECHO                    AvailableTests = "ECHO"
	AvailableTestsCOVID19TEST             AvailableTests = "COVID_19_TEST"
	AvailableTestsOTHER                   AvailableTests = "OTHER"
	AvailableTestsBLOODSUGARTEST          AvailableTests = "BLOOD_SUGAR_TEST"
	AvailableTestsLIPIDPROFILE            AvailableTests = "LIPID_PROFILE"
	AvailableTestsHEMOGLOBINTEST          AvailableTests = "HEMOGLOBIN_TEST"
	AvailableTestsTHYROIDTEST             AvailableTests = "THYROID_TEST"
	AvailableTestsLIVERFUNCTIONTEST       AvailableTests = "LIVER_FUNCTION_TEST"
	AvailableTestsKIDNEYFUNCTIONTEST      AvailableTests = "KIDNEY_FUNCTION_TEST"
	AvailableTestsURICACIDTEST            AvailableTests = "URIC_ACID_TEST"
	AvailableTestsVITAMINDTEST            AvailableTests = "VITAMIN_D_TEST"
	AvailableTestsVITAMINB12TEST          AvailableTests = "VITAMIN_B12_TEST"
	AvailableTestsHEMOGRAM                AvailableTests = "HEMOGRAM"
	AvailableTestsCOMPLETEBLOODCOUNT      AvailableTests = "COMPLETE_BLOOD_COUNT"
	AvailableTestsBLOODGROUPING           AvailableTests = "BLOOD_GROUPING"
	AvailableTestsHEPATITISBTEST          AvailableTests = "HEPATITIS_B_TEST"
	AvailableTestsHEPATITISCTEST          AvailableTests = "HEPATITIS_C_TEST"
	AvailableTestsHIVTEST                 AvailableTests = "HIV_TEST"
	AvailableTestsMALARIATEST             AvailableTests = "MALARIA_TEST"
	AvailableTestsDENGUETEST              AvailableTests = "DENGUE_TEST"
	AvailableTestsTYPHOIDTEST             AvailableTests = "TYPHOID_TEST"
	AvailableTestsCOVID19ANTIBODYTEST     AvailableTests = "COVID_19_ANTIBODY_TEST"
	AvailableTestsCOVID19RAPIDANTIGENTEST AvailableTests = "COVID_19_RAPID_ANTIGEN_TEST"
	AvailableTestsCOVID19RTPCRTEST        AvailableTests = "COVID_19_RT_PCR_TEST"
	AvailableTestsPREGNANCYTEST           AvailableTests = "PREGNANCY_TEST"
)

func (e *AvailableTests) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AvailableTests(s)
	case string:
		*e = AvailableTests(s)
	default:
		return fmt.Errorf("unsupported scan type for AvailableTests: %T", src)
	}
	return nil
}

type NullAvailableTests struct {
	AvailableTests AvailableTests `json:"available_tests"`
	Valid          bool           `json:"valid"` // Valid is true if AvailableTests is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAvailableTests) Scan(value interface{}) error {
	if value == nil {
		ns.AvailableTests, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AvailableTests.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAvailableTests) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AvailableTests), nil
}

func (e AvailableTests) Valid() bool {
	switch e {
	case AvailableTestsBLOODTEST,
		AvailableTestsURINETEST,
		AvailableTestsXRAY,
		AvailableTestsMRI,
		AvailableTestsCTSCAN,
		AvailableTestsULTRASOUND,
		AvailableTestsECG,
		AvailableTestsEEG,
		AvailableTestsBIOPSY,
		AvailableTestsSKINTEST,
		AvailableTestsALLERGYTEST,
		AvailableTestsGENETICTEST,
		AvailableTestsIMMUNOLOGYTEST,
		AvailableTestsHORMONETEST,
		AvailableTestsVIRALTEST,
		AvailableTestsBACTERIALTEST,
		AvailableTestsPARASITICTEST,
		AvailableTestsFUNGALTEST,
		AvailableTestsMOLECULARTEST,
		AvailableTestsTOXICOLOGYTEST,
		AvailableTestsECHO,
		AvailableTestsCOVID19TEST,
		AvailableTestsOTHER,
		AvailableTestsBLOODSUGARTEST,
		AvailableTestsLIPIDPROFILE,
		AvailableTestsHEMOGLOBINTEST,
		AvailableTestsTHYROIDTEST,
		AvailableTestsLIVERFUNCTIONTEST,
		AvailableTestsKIDNEYFUNCTIONTEST,
		AvailableTestsURICACIDTEST,
		AvailableTestsVITAMINDTEST,
		AvailableTestsVITAMINB12TEST,
		AvailableTestsHEMOGRAM,
		AvailableTestsCOMPLETEBLOODCOUNT,
		AvailableTestsBLOODGROUPING,
		AvailableTestsHEPATITISBTEST,
		AvailableTestsHEPATITISCTEST,
		AvailableTestsHIVTEST,
		AvailableTestsMALARIATEST,
		AvailableTestsDENGUETEST,
		AvailableTestsTYPHOIDTEST,
		AvailableTestsCOVID19ANTIBODYTEST,
		AvailableTestsCOVID19RAPIDANTIGENTEST,
		AvailableTestsCOVID19RTPCRTEST,
		AvailableTestsPREGNANCYTEST:
		return true
	}
	return false
}

func AllAvailableTestsValues() []AvailableTests {
	return []AvailableTests{
		AvailableTestsBLOODTEST,
		AvailableTestsURINETEST,
		AvailableTestsXRAY,
		AvailableTestsMRI,
		AvailableTestsCTSCAN,
		AvailableTestsULTRASOUND,
		AvailableTestsECG,
		AvailableTestsEEG,
		AvailableTestsBIOPSY,
		AvailableTestsSKINTEST,
		AvailableTestsALLERGYTEST,
		AvailableTestsGENETICTEST,
		AvailableTestsIMMUNOLOGYTEST,
		AvailableTestsHORMONETEST,
		AvailableTestsVIRALTEST,
		AvailableTestsBACTERIALTEST,
		AvailableTestsPARASITICTEST,
		AvailableTestsFUNGALTEST,
		AvailableTestsMOLECULARTEST,
		AvailableTestsTOXICOLOGYTEST,
		AvailableTestsECHO,
		AvailableTestsCOVID19TEST,
		AvailableTestsOTHER,
		AvailableTestsBLOODSUGARTEST,
		AvailableTestsLIPIDPROFILE,
		AvailableTestsHEMOGLOBINTEST,
		AvailableTestsTHYROIDTEST,
		AvailableTestsLIVERFUNCTIONTEST,
		AvailableTestsKIDNEYFUNCTIONTEST,
		AvailableTestsURICACIDTEST,
		AvailableTestsVITAMINDTEST,
		AvailableTestsVITAMINB12TEST,
		AvailableTestsHEMOGRAM,
		AvailableTestsCOMPLETEBLOODCOUNT,
		AvailableTestsBLOODGROUPING,
		AvailableTestsHEPATITISBTEST,
		AvailableTestsHEPATITISCTEST,
		AvailableTestsHIVTEST,
		AvailableTestsMALARIATEST,
		AvailableTestsDENGUETEST,
		AvailableTestsTYPHOIDTEST,
		AvailableTestsCOVID19ANTIBODYTEST,
		AvailableTestsCOVID19RAPIDANTIGENTEST,
		AvailableTestsCOVID19RTPCRTEST,
		AvailableTestsPREGNANCYTEST,
	}
}

type Doctor string

const (
	DoctorFemale Doctor = "Female"
	DoctorMale   Doctor = "Male"
)

func (e *Doctor) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Doctor(s)
	case string:
		*e = Doctor(s)
	default:
		return fmt.Errorf("unsupported scan type for Doctor: %T", src)
	}
	return nil
}

type NullDoctor struct {
	Doctor Doctor `json:"doctor"`
	Valid  bool   `json:"valid"` // Valid is true if Doctor is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDoctor) Scan(value interface{}) error {
	if value == nil {
		ns.Doctor, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Doctor.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDoctor) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Doctor), nil
}

func (e Doctor) Valid() bool {
	switch e {
	case DoctorFemale,
		DoctorMale:
		return true
	}
	return false
}

func AllDoctorValues() []Doctor {
	return []Doctor{
		DoctorFemale,
		DoctorMale,
	}
}

type DocumentType string

const (
	DocumentTypeLABREPORT        DocumentType = "LAB_REPORT"
	DocumentTypePRESCRIPTION     DocumentType = "PRESCRIPTION"
	DocumentTypeDISCHARGESUMMARY DocumentType = "DISCHARGE_SUMMARY"
	DocumentTypeIMAGING          DocumentType = "IMAGING"
	DocumentTypeVACCINATION      DocumentType = "VACCINATION"
	DocumentTypeALLERGY          DocumentType = "ALLERGY"
	DocumentTypeSURGERY          DocumentType = "SURGERY"
	DocumentTypeCHRONICCONDITION DocumentType = "CHRONIC_CONDITION"
	DocumentTypeFAMILYHISTORY    DocumentType = "FAMILY_HISTORY"
)

func (e *DocumentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DocumentType(s)
	case string:
		*e = DocumentType(s)
	default:
		return fmt.Errorf("unsupported scan type for DocumentType: %T", src)
	}
	return nil
}

type NullDocumentType struct {
	DocumentType DocumentType `json:"document_type"`
	Valid        bool         `json:"valid"` // Valid is true if DocumentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDocumentType) Scan(value interface{}) error {
	if value == nil {
		ns.DocumentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DocumentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDocumentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DocumentType), nil
}

func (e DocumentType) Valid() bool {
	switch e {
	case DocumentTypeLABREPORT,
		DocumentTypePRESCRIPTION,
		DocumentTypeDISCHARGESUMMARY,
		DocumentTypeIMAGING,
		DocumentTypeVACCINATION,
		DocumentTypeALLERGY,
		DocumentTypeSURGERY,
		DocumentTypeCHRONICCONDITION,
		DocumentTypeFAMILYHISTORY:
		return true
	}
	return false
}

func AllDocumentTypeValues() []DocumentType {
	return []DocumentType{
		DocumentTypeLABREPORT,
		DocumentTypePRESCRIPTION,
		DocumentTypeDISCHARGESUMMARY,
		DocumentTypeIMAGING,
		DocumentTypeVACCINATION,
		DocumentTypeALLERGY,
		DocumentTypeSURGERY,
		DocumentTypeCHRONICCONDITION,
		DocumentTypeFAMILYHISTORY,
	}
}

type PaymentMethod string

const (
	PaymentMethodCard     PaymentMethod = "card"
	PaymentMethodTransfer PaymentMethod = "transfer"
	PaymentMethodCash     PaymentMethod = "cash"
	PaymentMethodWallet   PaymentMethod = "wallet"
)

func (e *PaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethod(s)
	case string:
		*e = PaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentMethod struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethod), nil
}

func (e PaymentMethod) Valid() bool {
	switch e {
	case PaymentMethodCard,
		PaymentMethodTransfer,
		PaymentMethodCash,
		PaymentMethodWallet:
		return true
	}
	return false
}

func AllPaymentMethodValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodCard,
		PaymentMethodTransfer,
		PaymentMethodCash,
		PaymentMethodWallet,
	}
}

type PaymentStatus string

const (
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusSuccess   PaymentStatus = "success"
	PaymentStatusFailed    PaymentStatus = "failed"
	PaymentStatusRefunded  PaymentStatus = "refunded"
	PaymentStatusCancelled PaymentStatus = "cancelled"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

func (e PaymentStatus) Valid() bool {
	switch e {
	case PaymentStatusPending,
		PaymentStatusSuccess,
		PaymentStatusFailed,
		PaymentStatusRefunded,
		PaymentStatusCancelled:
		return true
	}
	return false
}

func AllPaymentStatusValues() []PaymentStatus {
	return []PaymentStatus{
		PaymentStatusPending,
		PaymentStatusSuccess,
		PaymentStatusFailed,
		PaymentStatusRefunded,
		PaymentStatusCancelled,
	}
}

type ScheduleAcceptanceStatus string

const (
	ScheduleAcceptanceStatusPENDING  ScheduleAcceptanceStatus = "PENDING"
	ScheduleAcceptanceStatusACCEPTED ScheduleAcceptanceStatus = "ACCEPTED"
	ScheduleAcceptanceStatusREJECTED ScheduleAcceptanceStatus = "REJECTED"
)

func (e *ScheduleAcceptanceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScheduleAcceptanceStatus(s)
	case string:
		*e = ScheduleAcceptanceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ScheduleAcceptanceStatus: %T", src)
	}
	return nil
}

type NullScheduleAcceptanceStatus struct {
	ScheduleAcceptanceStatus ScheduleAcceptanceStatus `json:"schedule_acceptance_status"`
	Valid                    bool                     `json:"valid"` // Valid is true if ScheduleAcceptanceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScheduleAcceptanceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ScheduleAcceptanceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScheduleAcceptanceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScheduleAcceptanceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScheduleAcceptanceStatus), nil
}

func (e ScheduleAcceptanceStatus) Valid() bool {
	switch e {
	case ScheduleAcceptanceStatusPENDING,
		ScheduleAcceptanceStatusACCEPTED,
		ScheduleAcceptanceStatusREJECTED:
		return true
	}
	return false
}

func AllScheduleAcceptanceStatusValues() []ScheduleAcceptanceStatus {
	return []ScheduleAcceptanceStatus{
		ScheduleAcceptanceStatusPENDING,
		ScheduleAcceptanceStatusACCEPTED,
		ScheduleAcceptanceStatusREJECTED,
	}
}

type ScheduleStatus string

const (
	ScheduleStatusSCHEDULED ScheduleStatus = "SCHEDULED"
	ScheduleStatusCOMPLETED ScheduleStatus = "COMPLETED"
	ScheduleStatusCANCELED  ScheduleStatus = "CANCELED"
)

func (e *ScheduleStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScheduleStatus(s)
	case string:
		*e = ScheduleStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ScheduleStatus: %T", src)
	}
	return nil
}

type NullScheduleStatus struct {
	ScheduleStatus ScheduleStatus `json:"schedule_status"`
	Valid          bool           `json:"valid"` // Valid is true if ScheduleStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScheduleStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ScheduleStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScheduleStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScheduleStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScheduleStatus), nil
}

func (e ScheduleStatus) Valid() bool {
	switch e {
	case ScheduleStatusSCHEDULED,
		ScheduleStatusCOMPLETED,
		ScheduleStatusCANCELED:
		return true
	}
	return false
}

func AllScheduleStatusValues() []ScheduleStatus {
	return []ScheduleStatus{
		ScheduleStatusSCHEDULED,
		ScheduleStatusCOMPLETED,
		ScheduleStatusCANCELED,
	}
}

type TestType string

const (
	TestTypeBLOODTEST               TestType = "BLOOD_TEST"
	TestTypeURINETEST               TestType = "URINE_TEST"
	TestTypeXRAY                    TestType = "X_RAY"
	TestTypeMRI                     TestType = "MRI"
	TestTypeCTSCAN                  TestType = "CT_SCAN"
	TestTypeULTRASOUND              TestType = "ULTRASOUND"
	TestTypeECG                     TestType = "ECG"
	TestTypeCOVIDTEST               TestType = "COVID_TEST"
	TestTypeDNATEST                 TestType = "DNA_TEST"
	TestTypeALLERGYTEST             TestType = "ALLERGY_TEST"
	TestTypeGENETICTEST             TestType = "GENETIC_TEST"
	TestTypeEEG                     TestType = "EEG"
	TestTypeBIOPSY                  TestType = "BIOPSY"
	TestTypeSKINTEST                TestType = "SKIN_TEST"
	TestTypeIMMUNOLOGYTEST          TestType = "IMMUNOLOGY_TEST"
	TestTypeHORMONETEST             TestType = "HORMONE_TEST"
	TestTypeVIRALTEST               TestType = "VIRAL_TEST"
	TestTypeBACTERIALTEST           TestType = "BACTERIAL_TEST"
	TestTypePARASITICTEST           TestType = "PARASITIC_TEST"
	TestTypeFUNGALTEST              TestType = "FUNGAL_TEST"
	TestTypeMOLECULARTEST           TestType = "MOLECULAR_TEST"
	TestTypeTOXICOLOGYTEST          TestType = "TOXICOLOGY_TEST"
	TestTypeECHO                    TestType = "ECHO"
	TestTypeCOVID19TEST             TestType = "COVID_19_TEST"
	TestTypeBLOODSUGARTEST          TestType = "BLOOD_SUGAR_TEST"
	TestTypeLIPIDPROFILE            TestType = "LIPID_PROFILE"
	TestTypeHEMOGLOBINTEST          TestType = "HEMOGLOBIN_TEST"
	TestTypeTHYROIDTEST             TestType = "THYROID_TEST"
	TestTypeLIVERFUNCTIONTEST       TestType = "LIVER_FUNCTION_TEST"
	TestTypeKIDNEYFUNCTIONTEST      TestType = "KIDNEY_FUNCTION_TEST"
	TestTypeURICACIDTEST            TestType = "URIC_ACID_TEST"
	TestTypeVITAMINDTEST            TestType = "VITAMIN_D_TEST"
	TestTypeVITAMINB12TEST          TestType = "VITAMIN_B12_TEST"
	TestTypeHEMOGRAM                TestType = "HEMOGRAM"
	TestTypeCOMPLETEBLOODCOUNT      TestType = "COMPLETE_BLOOD_COUNT"
	TestTypeBLOODGROUPING           TestType = "BLOOD_GROUPING"
	TestTypeHEPATITISBTEST          TestType = "HEPATITIS_B_TEST"
	TestTypeHEPATITISCTEST          TestType = "HEPATITIS_C_TEST"
	TestTypeHIVTEST                 TestType = "HIV_TEST"
	TestTypeMALARIATEST             TestType = "MALARIA_TEST"
	TestTypeDENGUETEST              TestType = "DENGUE_TEST"
	TestTypeTYPHOIDTEST             TestType = "TYPHOID_TEST"
	TestTypeCOVID19ANTIBODYTEST     TestType = "COVID_19_ANTIBODY_TEST"
	TestTypeCOVID19RAPIDANTIGENTEST TestType = "COVID_19_RAPID_ANTIGEN_TEST"
	TestTypeCOVID19RTPCRTEST        TestType = "COVID_19_RT_PCR_TEST"
	TestTypePREGNANCYTEST           TestType = "PREGNANCY_TEST"
	TestTypeOTHER                   TestType = "OTHER"
)

func (e *TestType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TestType(s)
	case string:
		*e = TestType(s)
	default:
		return fmt.Errorf("unsupported scan type for TestType: %T", src)
	}
	return nil
}

type NullTestType struct {
	TestType TestType `json:"test_type"`
	Valid    bool     `json:"valid"` // Valid is true if TestType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTestType) Scan(value interface{}) error {
	if value == nil {
		ns.TestType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TestType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTestType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TestType), nil
}

func (e TestType) Valid() bool {
	switch e {
	case TestTypeBLOODTEST,
		TestTypeURINETEST,
		TestTypeXRAY,
		TestTypeMRI,
		TestTypeCTSCAN,
		TestTypeULTRASOUND,
		TestTypeECG,
		TestTypeCOVIDTEST,
		TestTypeDNATEST,
		TestTypeALLERGYTEST,
		TestTypeGENETICTEST,
		TestTypeEEG,
		TestTypeBIOPSY,
		TestTypeSKINTEST,
		TestTypeIMMUNOLOGYTEST,
		TestTypeHORMONETEST,
		TestTypeVIRALTEST,
		TestTypeBACTERIALTEST,
		TestTypePARASITICTEST,
		TestTypeFUNGALTEST,
		TestTypeMOLECULARTEST,
		TestTypeTOXICOLOGYTEST,
		TestTypeECHO,
		TestTypeCOVID19TEST,
		TestTypeBLOODSUGARTEST,
		TestTypeLIPIDPROFILE,
		TestTypeHEMOGLOBINTEST,
		TestTypeTHYROIDTEST,
		TestTypeLIVERFUNCTIONTEST,
		TestTypeKIDNEYFUNCTIONTEST,
		TestTypeURICACIDTEST,
		TestTypeVITAMINDTEST,
		TestTypeVITAMINB12TEST,
		TestTypeHEMOGRAM,
		TestTypeCOMPLETEBLOODCOUNT,
		TestTypeBLOODGROUPING,
		TestTypeHEPATITISBTEST,
		TestTypeHEPATITISCTEST,
		TestTypeHIVTEST,
		TestTypeMALARIATEST,
		TestTypeDENGUETEST,
		TestTypeTYPHOIDTEST,
		TestTypeCOVID19ANTIBODYTEST,
		TestTypeCOVID19RAPIDANTIGENTEST,
		TestTypeCOVID19RTPCRTEST,
		TestTypePREGNANCYTEST,
		TestTypeOTHER:
		return true
	}
	return false
}

func AllTestTypeValues() []TestType {
	return []TestType{
		TestTypeBLOODTEST,
		TestTypeURINETEST,
		TestTypeXRAY,
		TestTypeMRI,
		TestTypeCTSCAN,
		TestTypeULTRASOUND,
		TestTypeECG,
		TestTypeCOVIDTEST,
		TestTypeDNATEST,
		TestTypeALLERGYTEST,
		TestTypeGENETICTEST,
		TestTypeEEG,
		TestTypeBIOPSY,
		TestTypeSKINTEST,
		TestTypeIMMUNOLOGYTEST,
		TestTypeHORMONETEST,
		TestTypeVIRALTEST,
		TestTypeBACTERIALTEST,
		TestTypePARASITICTEST,
		TestTypeFUNGALTEST,
		TestTypeMOLECULARTEST,
		TestTypeTOXICOLOGYTEST,
		TestTypeECHO,
		TestTypeCOVID19TEST,
		TestTypeBLOODSUGARTEST,
		TestTypeLIPIDPROFILE,
		TestTypeHEMOGLOBINTEST,
		TestTypeTHYROIDTEST,
		TestTypeLIVERFUNCTIONTEST,
		TestTypeKIDNEYFUNCTIONTEST,
		TestTypeURICACIDTEST,
		TestTypeVITAMINDTEST,
		TestTypeVITAMINB12TEST,
		TestTypeHEMOGRAM,
		TestTypeCOMPLETEBLOODCOUNT,
		TestTypeBLOODGROUPING,
		TestTypeHEPATITISBTEST,
		TestTypeHEPATITISCTEST,
		TestTypeHIVTEST,
		TestTypeMALARIATEST,
		TestTypeDENGUETEST,
		TestTypeTYPHOIDTEST,
		TestTypeCOVID19ANTIBODYTEST,
		TestTypeCOVID19RAPIDANTIGENTEST,
		TestTypeCOVID19RTPCRTEST,
		TestTypePREGNANCYTEST,
		TestTypeOTHER,
	}
}

type UserEnum string

const (
	UserEnumUSER                    UserEnum = "USER"
	UserEnumDIAGNOSTICCENTREOWNER   UserEnum = "DIAGNOSTIC_CENTRE_OWNER"
	UserEnumHOSPITAL                UserEnum = "HOSPITAL"
	UserEnumADMIN                   UserEnum = "ADMIN"
	UserEnumDIAGNOSTICCENTREMANAGER UserEnum = "DIAGNOSTIC_CENTRE_MANAGER"
)

func (e *UserEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserEnum(s)
	case string:
		*e = UserEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UserEnum: %T", src)
	}
	return nil
}

type NullUserEnum struct {
	UserEnum UserEnum `json:"user_enum"`
	Valid    bool     `json:"valid"` // Valid is true if UserEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UserEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserEnum), nil
}

func (e UserEnum) Valid() bool {
	switch e {
	case UserEnumUSER,
		UserEnumDIAGNOSTICCENTREOWNER,
		UserEnumHOSPITAL,
		UserEnumADMIN,
		UserEnumDIAGNOSTICCENTREMANAGER:
		return true
	}
	return false
}

func AllUserEnumValues() []UserEnum {
	return []UserEnum{
		UserEnumUSER,
		UserEnumDIAGNOSTICCENTREOWNER,
		UserEnumHOSPITAL,
		UserEnumADMIN,
		UserEnumDIAGNOSTICCENTREMANAGER,
	}
}

type Weekday string

const (
	WeekdayMonday    Weekday = "monday"
	WeekdayTuesday   Weekday = "tuesday"
	WeekdayWednesday Weekday = "wednesday"
	WeekdayThursday  Weekday = "thursday"
	WeekdayFriday    Weekday = "friday"
	WeekdaySaturday  Weekday = "saturday"
	WeekdaySunday    Weekday = "sunday"
)

func (e *Weekday) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Weekday(s)
	case string:
		*e = Weekday(s)
	default:
		return fmt.Errorf("unsupported scan type for Weekday: %T", src)
	}
	return nil
}

type NullWeekday struct {
	Weekday Weekday `json:"weekday"`
	Valid   bool    `json:"valid"` // Valid is true if Weekday is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeekday) Scan(value interface{}) error {
	if value == nil {
		ns.Weekday, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Weekday.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeekday) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Weekday), nil
}

func (e Weekday) Valid() bool {
	switch e {
	case WeekdayMonday,
		WeekdayTuesday,
		WeekdayWednesday,
		WeekdayThursday,
		WeekdayFriday,
		WeekdaySaturday,
		WeekdaySunday:
		return true
	}
	return false
}

func AllWeekdayValues() []Weekday {
	return []Weekday{
		WeekdayMonday,
		WeekdayTuesday,
		WeekdayWednesday,
		WeekdayThursday,
		WeekdayFriday,
		WeekdaySaturday,
		WeekdaySunday,
	}
}

type Appointment struct {
	ID                    string             `db:"id" json:"id"`
	PatientID             string             `db:"patient_id" json:"patient_id"`
	ScheduleID            string             `db:"schedule_id" json:"schedule_id"`
	DiagnosticCentreID    string             `db:"diagnostic_centre_id" json:"diagnostic_centre_id"`
	AppointmentDate       pgtype.Timestamptz `db:"appointment_date" json:"appointment_date"`
	TimeSlot              string             `db:"time_slot" json:"time_slot"`
	Status                AppointmentStatus  `db:"status" json:"status"`
	PaymentID             pgtype.UUID        `db:"payment_id" json:"payment_id"`
	PaymentStatus         NullPaymentStatus  `db:"payment_status" json:"payment_status"`
	PaymentAmount         pgtype.Numeric     `db:"payment_amount" json:"payment_amount"`
	PaymentDate           pgtype.Timestamptz `db:"payment_date" json:"payment_date"`
	CheckInTime           pgtype.Timestamptz `db:"check_in_time" json:"check_in_time"`
	CompletionTime        pgtype.Timestamptz `db:"completion_time" json:"completion_time"`
	Notes                 pgtype.Text        `db:"notes" json:"notes"`
	CancellationReason    pgtype.Text        `db:"cancellation_reason" json:"cancellation_reason"`
	CancelledBy           pgtype.UUID        `db:"cancelled_by" json:"cancelled_by"`
	CancellationTime      pgtype.Timestamptz `db:"cancellation_time" json:"cancellation_time"`
	CancellationFee       pgtype.Numeric     `db:"cancellation_fee" json:"cancellation_fee"`
	OriginalAppointmentID pgtype.UUID        `db:"original_appointment_id" json:"original_appointment_id"`
	ReschedulingReason    pgtype.Text        `db:"rescheduling_reason" json:"rescheduling_reason"`
	RescheduledBy         pgtype.UUID        `db:"rescheduled_by" json:"rescheduled_by"`
	ReschedulingTime      pgtype.Timestamptz `db:"rescheduling_time" json:"rescheduling_time"`
	ReschedulingFee       pgtype.Numeric     `db:"rescheduling_fee" json:"rescheduling_fee"`
	CreatedAt             pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	ReminderSent          pgtype.Bool        `db:"reminder_sent" json:"reminder_sent"`
	ReminderSentAt        pgtype.Timestamptz `db:"reminder_sent_at" json:"reminder_sent_at"`
}

type DiagnosticCentre struct {
	ID                   string             `db:"id" json:"id"`
	DiagnosticCentreName string             `db:"diagnostic_centre_name" json:"diagnostic_centre_name"`
	Latitude             pgtype.Float8      `db:"latitude" json:"latitude"`
	Longitude            pgtype.Float8      `db:"longitude" json:"longitude"`
	Address              []byte             `db:"address" json:"address"`
	Contact              []byte             `db:"contact" json:"contact"`
	Doctors              []string           `db:"doctors" json:"doctors"`
	AvailableTests       []string           `db:"available_tests" json:"available_tests"`
	CreatedBy            string             `db:"created_by" json:"created_by"`
	AdminID              string             `db:"admin_id" json:"admin_id"`
	CreatedAt            pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type DiagnosticCentreAvailability struct {
	ID                 string             `db:"id" json:"id"`
	DiagnosticCentreID string             `db:"diagnostic_centre_id" json:"diagnostic_centre_id"`
	DayOfWeek          Weekday            `db:"day_of_week" json:"day_of_week"`
	StartTime          pgtype.Time        `db:"start_time" json:"start_time"`
	EndTime            pgtype.Time        `db:"end_time" json:"end_time"`
	MaxAppointments    pgtype.Int4        `db:"max_appointments" json:"max_appointments"`
	SlotDuration       pgtype.Interval    `db:"slot_duration" json:"slot_duration"`
	BreakTime          pgtype.Interval    `db:"break_time" json:"break_time"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type DiagnosticSchedule struct {
	ID                 string                   `db:"id" json:"id"`
	UserID             string                   `db:"user_id" json:"user_id"`
	DiagnosticCentreID string                   `db:"diagnostic_centre_id" json:"diagnostic_centre_id"`
	ScheduleTime       pgtype.Timestamptz       `db:"schedule_time" json:"schedule_time"`
	TestType           TestType                 `db:"test_type" json:"test_type"`
	ScheduleStatus     ScheduleStatus           `db:"schedule_status" json:"schedule_status"`
	Doctor             string                   `db:"doctor" json:"doctor"`
	AcceptanceStatus   ScheduleAcceptanceStatus `db:"acceptance_status" json:"acceptance_status"`
	Notes              pgtype.Text              `db:"notes" json:"notes"`
	RejectionNote      pgtype.Text              `db:"rejection_note" json:"rejection_note"`
	CreatedAt          pgtype.Timestamptz       `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamptz       `db:"updated_at" json:"updated_at"`
}

type EmailVerificationToken struct {
	ID        string             `db:"id" json:"id"`
	Email     string             `db:"email" json:"email"`
	Token     string             `db:"token" json:"token"`
	Used      pgtype.Bool        `db:"used" json:"used"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type MedicalRecord struct {
	ID              string             `db:"id" json:"id"`
	UserID          string             `db:"user_id" json:"user_id"`
	UploaderID      string             `db:"uploader_id" json:"uploader_id"`
	UploaderType    UserEnum           `db:"uploader_type" json:"uploader_type"`
	ScheduleID      string             `db:"schedule_id" json:"schedule_id"`
	Title           string             `db:"title" json:"title"`
	DocumentType    DocumentType       `db:"document_type" json:"document_type"`
	FilePath        string             `db:"file_path" json:"file_path"`
	FileType        pgtype.Text        `db:"file_type" json:"file_type"`
	DocumentDate    pgtype.Date        `db:"document_date" json:"document_date"`
	UploadedAt      pgtype.Timestamp   `db:"uploaded_at" json:"uploaded_at"`
	ProviderName    pgtype.Text        `db:"provider_name" json:"provider_name"`
	Specialty       pgtype.Text        `db:"specialty" json:"specialty"`
	IsShared        pgtype.Bool        `db:"is_shared" json:"is_shared"`
	SharedUntil     pgtype.Timestamp   `db:"shared_until" json:"shared_until"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	UploaderAdminID pgtype.UUID        `db:"uploader_admin_id" json:"uploader_admin_id"`
}

type PasswordResetToken struct {
	ID        string             `db:"id" json:"id"`
	Email     string             `db:"email" json:"email"`
	Token     string             `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	Used      pgtype.Bool        `db:"used" json:"used"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Payment struct {
	ID                 string             `db:"id" json:"id"`
	AppointmentID      string             `db:"appointment_id" json:"appointment_id"`
	PatientID          string             `db:"patient_id" json:"patient_id"`
	DiagnosticCentreID string             `db:"diagnostic_centre_id" json:"diagnostic_centre_id"`
	Amount             pgtype.Numeric     `db:"amount" json:"amount"`
	Currency           string             `db:"currency" json:"currency"`
	PaymentMethod      PaymentMethod      `db:"payment_method" json:"payment_method"`
	PaymentStatus      PaymentStatus      `db:"payment_status" json:"payment_status"`
	TransactionID      pgtype.Text        `db:"transaction_id" json:"transaction_id"`
	PaymentMetadata    []byte             `db:"payment_metadata" json:"payment_metadata"`
	PaymentDate        pgtype.Timestamptz `db:"payment_date" json:"payment_date"`
	RefundAmount       pgtype.Numeric     `db:"refund_amount" json:"refund_amount"`
	RefundReason       pgtype.Text        `db:"refund_reason" json:"refund_reason"`
	RefundDate         pgtype.Timestamptz `db:"refund_date" json:"refund_date"`
	RefundedBy         pgtype.UUID        `db:"refunded_by" json:"refunded_by"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type User struct {
	ID              string             `db:"id" json:"id"`
	Email           pgtype.Text        `db:"email" json:"email"`
	Nin             pgtype.Text        `db:"nin" json:"nin"`
	Password        string             `db:"password" json:"password"`
	UserType        UserEnum           `db:"user_type" json:"user_type"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Fullname        pgtype.Text        `db:"fullname" json:"fullname"`
	EmailVerified   pgtype.Bool        `db:"email_verified" json:"email_verified"`
	EmailVerifiedAt pgtype.Timestamptz `db:"email_verified_at" json:"email_verified_at"`
}
