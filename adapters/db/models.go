// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserEnum string

const (
	UserEnumUSER              UserEnum = "USER"
	UserEnumDIAGNOSTICCENTRE  UserEnum = "DIAGNOSTIC_CENTRE"
	UserEnumHOSPITAL          UserEnum = "HOSPITAL"
	UserEnumADMIN             UserEnum = "ADMIN"
	UserEnumDIAGNOSTICMANAGER UserEnum = "DIAGNOSTIC_MANAGER"
)

func (e *UserEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserEnum(s)
	case string:
		*e = UserEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UserEnum: %T", src)
	}
	return nil
}

type NullUserEnum struct {
	UserEnum UserEnum `json:"user_enum"`
	Valid    bool     `json:"valid"` // Valid is true if UserEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UserEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserEnum), nil
}

func (e UserEnum) Valid() bool {
	switch e {
	case UserEnumUSER,
		UserEnumDIAGNOSTICCENTRE,
		UserEnumHOSPITAL,
		UserEnumADMIN,
		UserEnumDIAGNOSTICMANAGER:
		return true
	}
	return false
}

func AllUserEnumValues() []UserEnum {
	return []UserEnum{
		UserEnumUSER,
		UserEnumDIAGNOSTICCENTRE,
		UserEnumHOSPITAL,
		UserEnumADMIN,
		UserEnumDIAGNOSTICMANAGER,
	}
}

type User struct {
	ID        string             `db:"id" json:"id"`
	Email     pgtype.Text        `db:"email" json:"email"`
	Nin       pgtype.Text        `db:"nin" json:"nin"`
	Password  string             `db:"password" json:"password"`
	UserType  UserEnum           `db:"user_type" json:"user_type"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
