// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  nin,
  password,
  user_type,
  phone_number,
  email_verified,
  fullname
) VALUES  (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, email, nin, user_type, fullname, phone_number, email_verified, email_verified_at, created_at, updated_at
`

type CreateUserParams struct {
	Email         pgtype.Text `db:"email" json:"email"`
	Nin           pgtype.Text `db:"nin" json:"nin"`
	Password      string      `db:"password" json:"password"`
	UserType      UserEnum    `db:"user_type" json:"user_type"`
	PhoneNumber   pgtype.Text `db:"phone_number" json:"phone_number"`
	EmailVerified pgtype.Bool `db:"email_verified" json:"email_verified"`
	Fullname      pgtype.Text `db:"fullname" json:"fullname"`
}

type CreateUserRow struct {
	ID              string             `db:"id" json:"id"`
	Email           pgtype.Text        `db:"email" json:"email"`
	Nin             pgtype.Text        `db:"nin" json:"nin"`
	UserType        UserEnum           `db:"user_type" json:"user_type"`
	Fullname        pgtype.Text        `db:"fullname" json:"fullname"`
	PhoneNumber     pgtype.Text        `db:"phone_number" json:"phone_number"`
	EmailVerified   pgtype.Bool        `db:"email_verified" json:"email_verified"`
	EmailVerifiedAt pgtype.Timestamptz `db:"email_verified_at" json:"email_verified_at"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Nin,
		arg.Password,
		arg.UserType,
		arg.PhoneNumber,
		arg.EmailVerified,
		arg.Fullname,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nin,
		&i.UserType,
		&i.Fullname,
		&i.PhoneNumber,
		&i.EmailVerified,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, nin, password, user_type, created_at, updated_at, fullname, email_verified, email_verified_at, phone_number FROM users where id = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nin,
		&i.Password,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Fullname,
		&i.EmailVerified,
		&i.EmailVerifiedAt,
		&i.PhoneNumber,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, nin, password, user_type, created_at, updated_at, fullname, email_verified, email_verified_at, phone_number FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nin,
		&i.Password,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Fullname,
		&i.EmailVerified,
		&i.EmailVerifiedAt,
		&i.PhoneNumber,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, nin, password, user_type, created_at, updated_at, fullname, email_verified, email_verified_at, phone_number FROM users
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Nin,
			&i.Password,
			&i.UserType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Fullname,
			&i.EmailVerified,
			&i.EmailVerifiedAt,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  nin = COALESCE($2, nin),
  fullname = COALESCE($3, fullname),
  phone_number = COALESCE($4, phone_number),
  updated_at = NOW()
WHERE id = $1
RETURNING id, email, nin, user_type, fullname, phone_number, email_verified, email_verified_at, created_at, updated_at
`

type UpdateUserParams struct {
	ID          string      `db:"id" json:"id"`
	Nin         pgtype.Text `db:"nin" json:"nin"`
	Fullname    pgtype.Text `db:"fullname" json:"fullname"`
	PhoneNumber pgtype.Text `db:"phone_number" json:"phone_number"`
}

type UpdateUserRow struct {
	ID              string             `db:"id" json:"id"`
	Email           pgtype.Text        `db:"email" json:"email"`
	Nin             pgtype.Text        `db:"nin" json:"nin"`
	UserType        UserEnum           `db:"user_type" json:"user_type"`
	Fullname        pgtype.Text        `db:"fullname" json:"fullname"`
	PhoneNumber     pgtype.Text        `db:"phone_number" json:"phone_number"`
	EmailVerified   pgtype.Bool        `db:"email_verified" json:"email_verified"`
	EmailVerifiedAt pgtype.Timestamptz `db:"email_verified_at" json:"email_verified_at"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Nin,
		arg.Fullname,
		arg.PhoneNumber,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nin,
		&i.UserType,
		&i.Fullname,
		&i.PhoneNumber,
		&i.EmailVerified,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
