// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_verification.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :one
INSERT INTO email_verification_tokens (
    email,
    token,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, email, token, used, expires_at, created_at
`

type CreateEmailVerificationTokenParams struct {
	Email     string             `db:"email" json:"email"`
	Token     string             `db:"token" json:"token"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (*EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, createEmailVerificationToken, arg.Email, arg.Token, arg.ExpiresAt)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.Used,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const getEmailVerificationToken = `-- name: GetEmailVerificationToken :one
SELECT id, email, token, used, expires_at, created_at FROM email_verification_tokens 
WHERE token = $1 AND used = false
LIMIT 1
`

func (q *Queries) GetEmailVerificationToken(ctx context.Context, token string) (*EmailVerificationToken, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationToken, token)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.Used,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const markEmailAsVerified = `-- name: MarkEmailAsVerified :exec
UPDATE users
SET email_verified = true,
    email_verified_at = NOW(),
    updated_at = NOW()
WHERE email = $1
RETURNING id, email, nin, password, user_type, created_at, updated_at, fullname, email_verified, email_verified_at, phone_number
`

func (q *Queries) MarkEmailAsVerified(ctx context.Context, email pgtype.Text) error {
	_, err := q.db.Exec(ctx, markEmailAsVerified, email)
	return err
}

const markEmailVerificationTokenUsed = `-- name: MarkEmailVerificationTokenUsed :exec
UPDATE email_verification_tokens
SET used = true
WHERE id = $1
`

func (q *Queries) MarkEmailVerificationTokenUsed(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, markEmailVerificationTokenUsed, id)
	return err
}
