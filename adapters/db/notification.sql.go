// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notification.sql

package db

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
    user_id,
    type,
    title,
    message,
    metadata
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, type, title, message, read, read_at, metadata, created_at, updated_at
`

type CreateNotificationParams struct {
	UserID   string           `db:"user_id" json:"user_id"`
	Type     NotificationType `db:"type" json:"type"`
	Title    string           `db:"title" json:"title"`
	Message  string           `db:"message" json:"message"`
	Metadata []byte           `db:"metadata" json:"metadata"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (*Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.UserID,
		arg.Type,
		arg.Title,
		arg.Message,
		arg.Metadata,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Title,
		&i.Message,
		&i.Read,
		&i.ReadAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUnreadCount = `-- name: GetUnreadCount :one
SELECT COUNT(*) FROM notifications
WHERE user_id = $1 AND read = FALSE
`

func (q *Queries) GetUnreadCount(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getUnreadCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserNotifications = `-- name: GetUserNotifications :many
SELECT id, user_id, type, title, message, read, read_at, metadata, created_at, updated_at FROM notifications
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserNotificationsParams struct {
	UserID string `db:"user_id" json:"user_id"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) GetUserNotifications(ctx context.Context, arg GetUserNotificationsParams) ([]*Notification, error) {
	rows, err := q.db.Query(ctx, getUserNotifications, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Title,
			&i.Message,
			&i.Read,
			&i.ReadAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllAsRead = `-- name: MarkAllAsRead :exec
UPDATE notifications
SET 
    read = TRUE,
    read_at = NOW(),
    updated_at = NOW()
WHERE user_id = $1 AND read = FALSE
`

func (q *Queries) MarkAllAsRead(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, markAllAsRead, userID)
	return err
}

const markAsRead = `-- name: MarkAsRead :one
UPDATE notifications
SET 
    read = TRUE,
    read_at = NOW(),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, type, title, message, read, read_at, metadata, created_at, updated_at
`

type MarkAsReadParams struct {
	ID     string `db:"id" json:"id"`
	UserID string `db:"user_id" json:"user_id"`
}

func (q *Queries) MarkAsRead(ctx context.Context, arg MarkAsReadParams) (*Notification, error) {
	row := q.db.QueryRow(ctx, markAsRead, arg.ID, arg.UserID)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Title,
		&i.Message,
		&i.Read,
		&i.ReadAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
